/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

declare namespace monaco {

	// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.

	export type Thenable<T> = PromiseLike<T>;

	export interface IDisposable {
		dispose(): void;
	}

	export interface IEvent<T> {
		(listener: (e: T) => any, thisArg?: any): IDisposable;
	}

	/**
	 * A helper that allows to emit and listen to typed events
	 */
	export class Emitter<T> {
		constructor();
		readonly event: Event<T>;
		fire(event: T): void;
		dispose(): void;
	}

#include(vs/platform/markers/common/markers): MarkerTag, MarkerSeverity
#include(vs/base/common/cancellation): CancellationTokenSource, CancellationToken
#include(vs/base/common/uri): URI, UriComponents
#include(vs/base/common/keyCodes): KeyCode
#include(vs/editor/common/standalone/standaloneBase): KeyMod
#include(vs/base/common/htmlContent): IMarkdownString
#include(vs/base/browser/keyboardEvent;SimpleKeybinding=>any): IKeyboardEvent
#include(vs/base/browser/mouseEvent): IMouseEvent
#include(vs/editor/common/editorCommon): IScrollEvent
#include(vs/editor/common/core/position): IPosition, Position
#include(vs/editor/common/core/range): IRange, Range
#include(vs/editor/common/core/selection): ISelection, Selection, SelectionDirection
#include(vs/editor/common/core/token): Token
}

declare namespace monaco.editor {
#include(vs/editor/browser/widget/diffNavigator): IDiffNavigator
#includeAll(vs/editor/standalone/browser/standaloneEditor;modes.=>languages.;editorCommon.=>):
#include(vs/editor/standalone/common/standaloneThemeService): BuiltinTheme, IStandaloneThemeData, IColors
#include(vs/editor/common/modes/supports/tokenization): ITokenThemeRule
#include(vs/editor/common/services/webWorker): MonacoWebWorker, IWebWorkerOptions
#include(vs/editor/standalone/browser/standaloneCodeEditor): IActionDescriptor, IGlobalEditorOptions, IStandaloneEditorConstructionOptions, IDiffEditorConstructionOptions, IStandaloneCodeEditor, IStandaloneDiffEditor
export interface ICommandHandler {
	(...args: any[]): void;
}
#include(vs/platform/contextkey/common/contextkey): IContextKey
#include(vs/editor/standalone/browser/standaloneServices): IEditorOverrideServices
#include(vs/platform/markers/common/markers): IMarker, IMarkerData, IRelatedInformation
#include(vs/editor/standalone/browser/colorizer): IColorizerOptions, IColorizerElementOptions
#include(vs/base/common/scrollable): ScrollbarVisibility
#include(vs/platform/theme/common/themeService): ThemeColor
#includeAll(vs/editor/common/model;LanguageIdentifier=>any;MultilineTokens=>any;MultilineTokens2=>any;LineTokens=>any;SearchData=>any;LanguageId=>any;FormattingOptions=>languages.FormattingOptions;ModelRawContentChangedEvent=>any;ApplyEditsResult=>any): IScrollEvent
#includeAll(vs/editor/common/editorCommon;editorOptions.=>): IScrollEvent
#includeAll(vs/editor/common/model/textModelEvents):ModelRawChange,ModelRawFlush,ModelRawLineChanged,ModelRawLinesDeleted,ModelRawLinesInserted,ModelRawEOLChanged,ModelRawContentChangedEvent,InternalModelContentChangeEvent
#includeAll(vs/editor/common/controller/cursorEvents):
#include(vs/platform/accessibility/common/accessibility): AccessibilitySupport
#includeAll(vs/editor/common/config/editorOptions;IConfigurationPropertySchema=>any):BaseEditorOption,ComputedEditorOption,EditorFontLigatures,EditorLayoutInfoComputer,EditorLayoutInfoComputerEnv
#include(vs/editor/common/viewLayout/linesLayout): IEditorWhitespace
#includeAll(vs/editor/browser/editorBrowser;editorCommon.=>;editorOptions.=>;IMouseWheelEvent=>any;ServicesAccessor=>any;ICursors=>any;IDiffComputationResult=>any):IOverviewRuler
#include(vs/editor/common/config/fontInfo;ValidatedEditorOptions=>any;): FontInfo, BareFontInfo

//compatibility:
export type IReadOnlyModel = ITextModel;
export type IModel = ITextModel;
}

declare namespace monaco.languages {

#includeAll(vs/editor/standalone/browser/standaloneLanguages;modes.=>;editorCommon.=>editor.;model.=>editor.;IMarkerData=>editor.IMarkerData):EncodedTokenizationSupport2Adapter,TokenizationSupport2Adapter
#include(vs/editor/common/modes/languageConfiguration):CommentRule,LanguageConfiguration,FoldingMarkers,FoldingRules,OnEnterRule,IDocComment,CharacterPair,IndentationRule,IAutoClosingPair,IAutoClosingPairConditional,IndentAction,EnterAction
#includeAll(vs/editor/common/modes;editorCommon.IRange=>IRange;editorCommon.IPosition=>IPosition;editorCommon.=>editor.;ExtensionIdentifier=>any;IMarkerData=>editor.IMarkerData;model.=>editor.;CommentThreadCollapsibleState=>any;CommentMode=>any):LanguageIdentifier,TokenMetadata,CodeActionContext,IMode,ITokenizationSupport,ITokenizationRegistry,CommentThreadTemplate,CommentInfo,CommentWidget,Session
#include(vs/editor/common/services/modeService): ILanguageExtensionPoint
#includeAll(vs/editor/standalone/common/monarch/monarchTypes):

}

declare namespace monaco.worker {

#include(vs/editor/common/services/editorSimpleWorker;): IMirrorModel, IWorkerContext

}

//dtsv=3
